--Script-1: 

use DBName  
checkpoint 
DECLARE @Fileid INT, @chunkSize INT 
DECLARE @flSize DECIMAL(18,2), @spFree DECIMAL(18,2), @ActSize INT, @bufSpace INT 
DECLARE @flName VARCHAR(100), @SQLstr VARCHAR(1000) 
DECLARE @logicalfilename VARCHAR(100) 
 
-- sp_helpfile 
set @logicalfilename = 'put_logical_filename' 
 
SET @chunkSize = 500  -- No of MB to be shrunk in chunks. 
SELECT * from sysfiles 
DECLARE cur_SHRINK CURSOR FOR  
      SELECT  Fileid, Name, 
             CAST((SIZE * 8 / 1024.0) AS DECIMAL(18,2)) AS FILESIZE,  
              CAST((SIZE * 8 / 1024.0) - (FILEPROPERTY(Name,'SpaceUsed')/ 128.0) AS DECIMAL(15,2)) SPACEFREE 
      FROM    SYSFILES 
      WHERE  name = @logicalfilename 
OPEN cur_SHRINK 
 
FETCH NEXT FROM cur_SHRINK 
INTO @Fileid, @flName, @flSize, @spFree 
 
WHILE @@FETCH_STATUS = 0 
BEGIN 
      SET @ActSize = @flSize 
      SET @bufSpace = @flSize - @spFree + ((@flSize - @spFree)* 0.10) 
 
      PRINT RTRIM(@flName) + '...' 
      WHILE @ActSize > @bufSpace 
      BEGIN 
             SET @ActSize = @ActSize - @chunkSize 
             IF @ActSize < @bufSpace 
                    SET @ActSize = @bufSpace 
             SET @SQLstr = 'DBCC SHRINKFILE(' + CAST(@Fileid AS VARCHAR) + ','  + CAST(@ActSize AS VARCHAR) + ')' 
             PRINT @SQLstr 
             EXEC(@SQLstr) 
      END 
 
FETCH NEXT FROM cur_SHRINK 
INTO @Fileid, @flName, @flSize, @spFree 
END 
 
CLOSE cur_SHRINK 
DEALLOCATE cur_SHRINK

==============================================================================================
--Script-2: 

USE DBNAME --put your db name.
GO                                   
DECLARE @PRNSTR NVARCHAR(MAX)       -- Print String 
DECLARE @SQLSTR NVARCHAR(MAX)       -- SQL Command
DECLARE @FILEID NVARCHAR(MAX)       -- FileID to be shrunk
DECLARE @CURSIZE BIGINT             -- Current Size
DECLARE @TARSIZE BIGINT             -- Target Size
DECLARE @CHNSIZE BIGINT             -- Chunk Size
DECLARE @I INT                      -- Loop Counter
SET @FILEID='1'                     -- Set FileID        
SET @CURSIZE=500              -- Set Current Size 
SET @TARSIZE=300              -- Set Target Size
SET @CHNSIZE=500             -- Set Chunk Size
SET @I=1
SET @CURSIZE=@CURSIZE-@CHNSIZE 
SET @PRNSTR=  'Shrinking Process Begins for File ID : ' + @FILEID
RAISERROR(@PRNSTR,0,1) WITH NOWAIT 
PRINT '*~*~*~*~*~*~*~*~*~**~*~*~*~*~*~*~*~*~**~*~*'
WHILE @CURSIZE>=@TARSIZE
      BEGIN
            SET @PRNSTR= 'Loop : '+ CONVERT(NVARCHAR(2),@I)+CHAR(13)+CONVERT(NVARCHAR(MAX),GETDATE(),109)
            RAISERROR(@PRNSTR,0,1) WITH NOWAIT
            SET @SQLSTR = 'DBCC SHRINKFILE ('+@FILEID+' , '+CONVERT(VARCHAR(MAX),@CURSIZE)+')'
            RAISERROR(@SQLSTR,0,1) WITH NOWAIT 
            EXEC SP_EXECUTESQL @STATEMENT=@SQLSTR
            SET @PRNSTR=  'Shrunk till now : '+ convert(nvarchar(max),(@i*@CHNSIZE))+' MB'
            RAISERROR(@PRNSTR,0,1) WITH NOWAIT
            SET @PRNSTR=  '*~*~*~*~*~*~*~*~*~**~*~*~*~*~*~*~*~*~**~*~*'
            RAISERROR(@PRNSTR,0,1) WITH NOWAIT
            SET @CURSIZE=@CURSIZE-@CHNSIZE
            SET @I=@I+1
      END
PRINT 'Shrinking Completed for given range size.'
=========================================================================================
--Script-3: 

Use DBName
go
DECLARE @shrinkIncrement INT -- amount to shrink each time in MB
DECLARE @shrinkCount INT -- number of shrinks to perform
DECLARE @fileId NVARCHAR(5)  -- FileId 
 
SET @shrinkIncrement = 10240
SET @shrinkCount = 5
SET @fileId = 3    ---select * from sysfiles
 
/************************************************/
 
DECLARE @currentSize BIGINT
DECLARE @newSize BIGINT
DECLARE @LastNewSize BIGINT
DECLARE @cmd NVARCHAR(1024)
 
shrink_start:
 
SET @currentSize=(SELECT [size] FROM sys.database_files WHERE [file_id]=@fileId)
SET @currentSize=(SELECT (@currentSize*8)/1024) 
SET @newSize=@currentSize-@shrinkIncrement
 
print getdate()
PRINT 'Current Size: ' + CONVERT(NVARCHAR(128),@currentSize)
PRINT 'New Size:  ' + CONVERT(NVARCHAR(128),@newSize)
PRINT 'Last New Size:  ' + CONVERT(NVARCHAR(128),@lastNewSize)
 
IF @newSize < 0 or (@newsize = @lastNewSize)
BEGIN
                  GOTO ExitProcess
END
 
SET @cmd = 'DBCC SHRINKFILE (' + @fileid + ', ' + CONVERT(NVARCHAR(128),@newSize) + ')'
PRINT 'Command Run: "' + @cmd + '"'
EXEC (@cmd)
 
SET @lastNewSize = @newSize
SET @shrinkCount = @shrinkCount - 1
 
IF @shrinkCount > 0 
BEGIN
                  WAITFOR DELAY '00:00:10'     --'00:05:00'
                  GOTO shrink_start
END
 
ExitProcess:
PRINT 'End Process'
=============================================================================================
--Script-4: 

set nocount on 
declare @DBFileName sysname 
declare @TargetFreeMB int 
declare @ShrinkIncrementMB int 
-- Set Name of Database file to shrink 
set @DBFileName = 'Database filename' --please enter file name
-- Set Desired file free space in MB after shrink 
set @TargetFreeMB = 1000000
-- Set Increment to shrink file by in MB 
set @ShrinkIncrementMB= 500
-- Show Size, Space Used, Unused Space, and Name of all database files 
select [FileSizeMB] = convert(numeric(10,2),round(a.size/128.,2)), 
 [UsedSpaceMB]= convert(numeric(10,2),round(fileproperty( a.name,'SpaceUsed')/128.,2)) , 
 [UnusedSpaceMB]= convert(numeric(10,2),round((a.size-fileproperty( a.name,'SpaceUsed'))/128.,2)) ,[DBFileName]= a.name from sysfiles a 
declare @sql varchar(8000) 
declare @SizeMB float 
declare @UsedMB float 
-- Get current file size in MB 
select @SizeMB = size/128. from sysfiles where name = @DBFileName 
-- Get current space used in MB 
select @UsedMB = fileproperty( @DBFileName,'SpaceUsed')/128.0 
-- Loop until file at desired size 
while @SizeMB > @UsedMB+@TargetFreeMB+@ShrinkIncrementMB 
begin 
set @sql = 'dbcc shrinkfile ( '+@DBFileName+', ' + convert(varchar(20),convert(numeric(10,0),@SizeMB-@ShrinkIncrementMB))+' ) WITH NO_INFOMSGS' 
print 'Start ' + @sql + ' at ' + convert(varchar(30),getdate(),121) 
exec ( @sql ) 
print 'Done ' + @sql + ' at '+convert(varchar(30),getdate(),121) 
-- Get current file size in MB 
select @SizeMB = size/128. from sysfiles where name = @DBFileName 
-- Get current space used in MB 
select @UsedMB = fileproperty( @DBFileName,'SpaceUsed')/128.0 
print 'SizeMB=' + convert(varchar(20),@SizeMB) + ' UsedMB=' + convert(varchar(20),@UsedMB) 
end 
select [EndFileSize] = @SizeMB, [EndUsedSpace] = @UsedMB, [DBFileName] = @DBFileName
